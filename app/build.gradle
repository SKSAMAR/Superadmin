plugins {
    id 'com.android.application'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

def appType
def sdkname
android {
    compileSdk 33
    defaultConfig {
        manifestPlaceholders = [appName: "Rakesh Pay"]
        appType = "B2B"
        applicationId "beta.hindmoney.in"
        minSdk 22
        //noinspection OldTargetApi
        targetSdk 31
        versionCode 9
        versionName "0.0.1.9"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    namespace 'com.fintech.superadmin'
    //enable view binding
    //noinspection DataBindingWithoutKapt
    android.buildFeatures.dataBinding = true

}

repositories {
    mavenCentral()
}


dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.browser:browser:1.4.0'
    implementation 'com.google.android.gms:play-services-fitness:21.1.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.5.1'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'


    //Circular ImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    //ends

    //CircularButton
    implementation 'com.github.markushi:circlebutton:1.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    //CircularButton ends


    //Room Database and Important

    def room_version = "2.4.2"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"


    // Retrofit & OkHttp
    implementation 'com.github.bumptech.glide:glide:4.13.2'
    kapt 'com.github.bumptech.glide:compiler:4.13.2'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.9'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.9'


    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-android-compiler:2.37"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'


    //RxJava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    //RoundedImageView
    implementation 'com.makeramen:roundedimageview:2.3.0'
    //Glide Svg
    implementation 'com.github.corouteam:GlideToVectorYou:2.0.0'

    //OnBoarding
    implementation files('libs/onboardinglib_live.v-1.0.11.aar')


    implementation 'de.greenrobot:greendao:2.1.0'
    implementation 'org.greenrobot:eventbus:3.3.1'


    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
//    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.google.code.ksoap2-android:ksoap2-android:3.6.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "com.karumi:dexter:6.2.3"
    implementation 'com.github.yalantis:ucrop:2.2.8'


    //Location co-ordinates
    implementation 'com.google.android.gms:play-services-location:20.0.0'
    //Font Awesome
    implementation 'info.androidhive:fontawesome:0.0.5'

    //Gif ImageView
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.25'

    //ImagePicker with various feature
    implementation 'com.github.dhaval2404:imagepicker:2.1'
    //Enable multidex
    implementation 'com.android.support:multidex:1.0.3'
    //Google Pay UPI
    implementation 'com.google.android.gms:play-services-wallet:19.1.0'

    //Razorpay
    implementation 'com.razorpay:checkout:1.6.26'
    //Paytm
//    implementation 'com.paytm.appinvokesdk:appinvokesdk:1.6.8'
    //Fingerprint
    implementation files('libs/simple-xml-2.7.1.jar')
    implementation group: 'xml-security', name: 'xmlsec', version: '1.3.0'
    implementation 'com.intuit.sdp:sdp-android:1.1.0'
    //Bar Graph
    implementation 'com.github.PhilJay:MPAndroidChart:v2.2.5'
    //Bar Graph
    implementation 'com.itextpdf:itextg:5.5.10'
    implementation 'com.karumi:dexter:6.2.3'
    //pdf viewer
    implementation 'com.github.barteksc:android-pdf-viewer:2.8.2'
    //Custom tabs
    implementation 'saschpe.android:customtabs:2.0.0'

    //noinspection GradleCompatible
    implementation 'com.android.support:customtabs:28.0.0'

    //Image Crop
    implementation 'com.github.akshaaatt:Cropper:1.00'
    implementation 'com.github.CanHub:Android-Image-Cropper:4.2.1'


    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.13.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'

    //Lotte Animation
    implementation "com.airbnb.android:lottie-compose:$lottieVersion"
    //ConstraintLayout
    implementation 'androidx.constraintlayout:constraintlayout-compose:1.0.1'

    //Animation
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.animation:animation-graphics:$compose_version"

    def nav_version = "2.5.2"
    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:$nav_version"


    // android ktx and Accompanist Pager
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager-indicators:$accompanist_version"

    //coil
    implementation("io.coil-kt:coil-compose:2.2.0")

    def camerax_version = "1.0.1"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation "androidx.camera:camera-view:1.0.0-alpha27"


    //Permission
    implementation "com.google.accompanist:accompanist-permissions:0.19.0"
    //More Icons
    implementation "androidx.compose.material:material-icons-extended:$compose_version"

    //Navigation Animation
    implementation "com.google.accompanist:accompanist-navigation-animation:0.24.13-rc"

    //QrGenerator
    implementation "androidmads.library.qrgenearator:QRGenearator:1.0.3"

    //BarCode
    implementation 'com.google.zxing:core:3.5.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0@aar'
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'

    //Flow Layout
    implementation "com.google.accompanist:accompanist-flowlayout:0.17.0"
    //LiveData as state
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    //collapsing toolbar
    implementation 'me.onebone:toolbar-compose:2.3.4'


    //SDP Compose
    implementation 'com.intuit.sdp:sdp-android:1.1.0'
    //OTPView
    implementation 'com.yogeshpaliyal:speld:0.0.1-alpha03'
    implementation 'phonepe.intentsdk.android.release:IntentSDK:1.7.1'

    //payumoney
    implementation 'in.payu:payu-checkout-pro:1.8.5'
    implementation 'in.payu:olamoney:1.1.0'
    implementation 'in.payu:phonepe-intent:1.6.2'
    implementation 'in.payu:payu-gpay:2.4.0'
    implementation 'in.payu:native-otp-assist:1.2.2'

    //Cashfree
    implementation 'com.cashfree.pg:api:2.0.6'

    implementation 'com.google.code.ksoap2-android:ksoap2-android:3.6.2'
    implementation 'com.github.f0ris.sweetalert:library:1.5.1'
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.7'
    implementation 'com.squareup.okio:okio:3.2.0'
    //implementation 'com.stripe:stripe-android:20.25.3'


    //Scratch
    implementation 'in.codeshuffle.scratchcardlayout:ScratchCardLayout:1.0.8'


    //Calendar
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.2'
    implementation 'com.kizitonwose.calendar:view:2.1.1'
    implementation 'com.kizitonwose.calendar:compose:2.1.1'

}

repositories {
    mavenCentral()
}

static def fetchAarFileNames(appId) {
    String responseString = ""
    try {
        URL url = new URL("https://${appId}/Backend/Merchant/API/app/temp/services.php?services=ATM")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()
        connection.setConnectTimeout(60000)
        connection.setReadTimeout(60000)

        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
            responseString = reader.readLine()
            reader.close()
        } else {
            // Handle error response
        }
        connection.disconnect()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return responseString
}

static def fetchDMTName(appId) {
    String responseString = "paysprint"
    try {
        URL url = new URL("https://${appId}/Backend/Merchant/API/app/temp/services.php?services=DMT")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()
        connection.setConnectTimeout(60000)
        connection.setReadTimeout(60000)

        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
            responseString = reader.readLine()
            reader.close()
        } else {
            // Handle error response
        }
        connection.disconnect()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return responseString
}

static def fetchMagicWalletName(appId) {
    String responseString = "no"
    try {
        URL url = new URL("https://${appId}/Backend/Merchant/API/app/temp/services.php?services=MagicWallet")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()
        connection.setConnectTimeout(60000)
        connection.setReadTimeout(60000)

        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
            responseString = reader.readLine()
            reader.close()
        } else {
            // Handle error response
        }
        connection.disconnect()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return responseString
}

static def fetchSecondaryUrl(appId) {
    String responseString = ""
    try {
        URL url = new URL("https://${appId}/Backend/Merchant/API/app/temp/services.php?redirection=redirection")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()
        connection.setConnectTimeout(60000)
        connection.setReadTimeout(60000)
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
            responseString = reader.readLine()
            reader.close()
        } else {
            // Handle error response
        }
        connection.disconnect()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return responseString
}

static def fetchROffer(appId) {
    String responseString = "no"
    try {
        URL url = new URL("https://${appId}/Backend/Merchant/API/app/temp/services.php?roffer=roffer")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()
        connection.setConnectTimeout(60000)
        connection.setReadTimeout(60000)
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))
            if (reader.readLine() != null && !reader.readLine().trim().isEmpty()) {
                responseString = reader.readLine()
            }
            reader.close()
        } else {
            // Handle error response
        }
        connection.disconnect()
    } catch (Exception e) {
        e.printStackTrace()
    }
    return responseString
}

afterEvaluate {
    //fixed
    def appId = android.defaultConfig.applicationId
    def apiName = fetchAarFileNames(appId)
    def dmtName = fetchDMTName(appId)
    def magicWallet = fetchMagicWalletName(appId)
    def secondaryUrl = fetchSecondaryUrl(appId)
    def rOfferAvailability = fetchROffer(appId)
    sdkname = apiName.trim().toLowerCase()
    if (secondaryUrl == null || secondaryUrl.trim().isEmpty()) {
        secondaryUrl = ""
    }
    createInfoXml(appType, sdkname, secondaryUrl, rOfferAvailability, dmtName, magicWallet)

    project.dependencies {
        fileTree(dir: "atms/${sdkname}", include: '*.aar').each { File file ->
            print "file : ${file.name}\n"
            implementation files(file)
        }
        fileTree(dir: "atms/${sdkname}", include: '*.jar').each { File file ->
            print "file : ${file.name}\n"
            implementation files(file)
        }

        fileTree(dir: "atms/${sdkname}", include: '*.txt').each { File file ->
            implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
            print("Bouncy Included")
        }
    }
}

def downloadImage(String url, String filename) {

    def drawableDir = new File(projectDir, "src/main/res/drawable")
    if (!drawableDir.exists()) {
        drawableDir.mkdirs()
    }
    def file = new File(projectDir, "src/main/res/drawable/${filename}")
    new URL(url).withInputStream { i ->
        file.withOutputStream { it << i }
    }
}

afterEvaluate {
    def appId = android.defaultConfig.applicationId
    downloadImage("https://${appId}/Backend/Merchant/API/app/temp/icons.php?mode=download", "logo.png")
}

def createInfoXml(String appType, String sdkname, String secondaryUrl, String rOfferAvailability, String dmtName, String magicWallet) {
    def appId = android.defaultConfig.applicationId
    def xmlContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
            "<resources>\n" +
            "    <string name=\"app_type\">${appType}</string>\n" +
            "    <string name=\"base_url_data\">${appId}</string>\n" +
            "    <string name=\"atmType\">${sdkname}</string>\n" +
            "    <string name=\"secondaryUrl\">${secondaryUrl}</string>\n" +
            "    <string name=\"roffer\">${rOfferAvailability}</string>\n" +
            "    <string name=\"dmtName\">${dmtName}</string>\n" +
            "    <string name=\"magicWallet\">${magicWallet}</string>\n" +
            "</resources>"
    print(xmlContent)
    def file = new File(projectDir, "src/main/res/values/info.xml")
    if (file.exists()) {
        file.delete()
    }
    file.withWriter { writer ->
        writer.write(xmlContent)
    }
    return file
}